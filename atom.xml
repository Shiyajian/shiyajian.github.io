<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shiyajian</title>
  
  <subtitle>个人技术博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://shiyajian.github.io/"/>
  <updated>2018-12-17T14:29:19.314Z</updated>
  <id>http://shiyajian.github.io/</id>
  
  <author>
    <name>Shiyajian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>log-cost-time</title>
    <link href="http://shiyajian.github.io/2018/12/17/Java%E6%97%A5%E5%BF%97%E6%A0%BC%E5%BC%8F%E5%BA%94%E8%AF%A5%E6%98%AF%E5%8D%A0%E4%BD%8D%E7%AC%A6%E8%BF%98%E6%98%AF%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5/"/>
    <id>http://shiyajian.github.io/2018/12/17/Java日志格式应该是占位符还是字符串拼接/</id>
    <published>2018-12-17T14:01:57.000Z</published>
    <updated>2018-12-17T14:29:19.314Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​    上次在群中，有个群友说自己把所有项目中，所有使用占位符打印日志的方式都修改成为了字符串拼接的方式，因为他曾经看了一篇文章，说字符串拼接的形式比占位符形式的性能更好，这个话题引起了大家的广泛讨论。</p><p>​    在我印象中，我记得曾经看过的文章说，占位符的方式性能好，因为如果不打日志的话，就不会进行字符串拼接，节省性能。最后抱着一探究竟的心态，我进行了一次日志输出方式的实验。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>IDEA + Gradle + JDK 8 + SpringBoot + Junit + Slf4j + logback</p><h2 id="测试方式"><a href="#测试方式" class="headerlink" title="测试方式"></a>测试方式</h2><p>本次测试我定义了4个方法，每个方法同时打印 DEBUG ，INFO 日志，默认日志级别是INFO级别的，所有DEBUG级别日志是不输出的，这样做是会不被其他级别日志造成影响，同时我还给部分方法增加了if判断，这个是为了测试，我们是否有必要显性的进行日志级别的操作，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">record</span><span class="params">(LogEntity logEntity)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">               log.debug(<span class="string">"id:&#123;&#125;,name:&#123;&#125;,ip:&#123;&#125;,url:&#123;&#125;,params:&#123;&#125;"</span>,</span><br><span class="line">                       logEntity.getId(),</span><br><span class="line">                       logEntity.getName(),</span><br><span class="line">                       logEntity.getId(),</span><br><span class="line">                       logEntity.getUrl(),</span><br><span class="line">                       logEntity.getParams());</span><br><span class="line">           &#125;</span><br><span class="line">           log.info(<span class="string">"id:&#123;&#125;,name:&#123;&#125;,ip:&#123;&#125;,url:&#123;&#125;,params:&#123;&#125;"</span>,</span><br><span class="line">                   logEntity.getId(),</span><br><span class="line">                   logEntity.getName(),</span><br><span class="line">                   logEntity.getId(),</span><br><span class="line">                   logEntity.getUrl(),</span><br><span class="line">                   logEntity.getParams());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">record1</span><span class="params">(LogEntity logEntity)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">           log.debug(<span class="string">"id:&#123;&#125;,name:&#123;&#125;,ip:&#123;&#125;,url:&#123;&#125;,params:&#123;&#125;"</span>,</span><br><span class="line">                   logEntity.getId(),</span><br><span class="line">                   logEntity.getName(),</span><br><span class="line">                   logEntity.getId(),</span><br><span class="line">                   logEntity.getUrl(),</span><br><span class="line">                   logEntity.getParams());</span><br><span class="line">           log.info(<span class="string">"id:&#123;&#125;,name:&#123;&#125;,ip:&#123;&#125;,url:&#123;&#125;,params:&#123;&#125;"</span>,</span><br><span class="line">                   logEntity.getId(),</span><br><span class="line">                   logEntity.getName(),</span><br><span class="line">                   logEntity.getId(),</span><br><span class="line">                   logEntity.getUrl(),</span><br><span class="line">                   logEntity.getParams());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">record2</span><span class="params">(LogEntity logEntity)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">               log.debug(<span class="string">"id:"</span> + logEntity.getId() +</span><br><span class="line">                       <span class="string">",name:"</span> + logEntity.getName() +</span><br><span class="line">                       <span class="string">",ip:"</span> + logEntity.getId() +</span><br><span class="line">                       <span class="string">",url:"</span> + logEntity.getUrl() +</span><br><span class="line">                       <span class="string">",params:"</span> + logEntity.getParams());</span><br><span class="line">           &#125;</span><br><span class="line">           log.info(<span class="string">"id:"</span> + logEntity.getId() +</span><br><span class="line">                   <span class="string">",name:"</span> + logEntity.getName() +</span><br><span class="line">                   <span class="string">",ip:"</span> + logEntity.getId() +</span><br><span class="line">                   <span class="string">",url:"</span> + logEntity.getUrl() +</span><br><span class="line">                   <span class="string">",params:"</span> + logEntity.getParams());</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">record3</span><span class="params">(LogEntity logEntity)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">           log.debug(<span class="string">"id:"</span> + logEntity.getId() +</span><br><span class="line">                     <span class="string">",name:"</span> + logEntity.getName() +</span><br><span class="line">                     <span class="string">",ip:"</span> + logEntity.getId() +</span><br><span class="line">                     <span class="string">",url:"</span> + logEntity.getUrl() +</span><br><span class="line">                     <span class="string">",params:"</span> + logEntity.getParams());</span><br><span class="line">           log.info(<span class="string">"id:"</span> + logEntity.getId() +</span><br><span class="line">                   <span class="string">",name:"</span> + logEntity.getName() +</span><br><span class="line">                   <span class="string">",ip:"</span> + logEntity.getId() +</span><br><span class="line">                   <span class="string">",url:"</span> + logEntity.getUrl() +</span><br><span class="line">                   <span class="string">",params:"</span> + logEntity.getParams());</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><p>我运行了6次Junit测试用例，结果如下：</p><p><img src="https://github.com/Shiyajian/examples/blob/master/public/images/log.png" alt="log"></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>通过测试结果可以有以下发现：</p><ul><li><p>字符串拼接的方法，大部分下情况性能高于占位符</p></li><li><p>如果采用占位符的方式，一定不要增加 <strong>log.isDebugEnabled()</strong>这种方式再显性的进行判断，否则性能会大大降低</p><blockquote><p>昨天看到nacos项目，在翻看nacos源码的时候，发现针对日志输出这块，nacos也使用的字符串拼接</p></blockquote></li></ul><p>本文没有太高深的道理和原理，只是因为一个小的讨论，进行了一次实验，实验的过程和结果是否准确可靠还需要大家各自斟酌，同时希望借此抛砖引玉，能有大神给更加详细的解答。</p><p>github地址：  <a href="https://github.com/Shiyajian/examples" target="_blank" rel="noopener">https://github.com/Shiyajian/examples</a> ,查看 spring-boot/chapter1/log</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><p>自己写了个插件，可以打开CSDN的博客之后，自动展开全部内容，不用每次点【查看更多】，然后还需要登录那么麻烦了，github: <a href="https://github.com/Shiyajian/CSDN-clear.git" target="_blank" rel="noopener">https://github.com/Shiyajian/CSDN-clear.git</a></p></li><li><p>个人QQ好友群：757696438，吹牛扯淡为主，技术为辅，拒绝装逼，最欢迎妹子。</p></li><li>个人微信：q408859832 技术交流为主</li><li>备注：博客园</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;​    上次在群中，有个群友说自己把所有项目中，所有使用占位符打印日志的方式都修改成为了字符串拼接的方式，因为他曾经看了一篇文章，说字符串
      
    
    </summary>
    
      <category term="spring-boot" scheme="http://shiyajian.github.io/categories/spring-boot/"/>
    
    
      <category term="spring-boot" scheme="http://shiyajian.github.io/tags/spring-boot/"/>
    
      <category term="log" scheme="http://shiyajian.github.io/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>使用Feign上传文件</title>
    <link href="http://shiyajian.github.io/2018/11/25/%E4%BD%BF%E7%94%A8Feign%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
    <id>http://shiyajian.github.io/2018/11/25/使用Feign上传文件/</id>
    <published>2018-11-25T12:01:03.000Z</published>
    <updated>2018-11-25T12:52:14.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Cloud下使用Feign-Form实现微服务之间的文件上传"><a href="#Spring-Cloud下使用Feign-Form实现微服务之间的文件上传" class="headerlink" title="Spring Cloud下使用Feign Form实现微服务之间的文件上传"></a>Spring Cloud下使用Feign Form实现微服务之间的文件上传</h2><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>​    Spring Cloud现在已经被越来越多的公司采用了，微服务架构比传统意义上的单服务架构从复杂度上多了很多，出现了很多复杂的场景。比如，我们的产品是个app，支持第三方登录功能，在手机端调用第三方授权接口之后，返回了用户的相关信息，比如open_id，性别，头像等。这些信息我们需要保存在我们服务器上，当时针对头像是应该保存图片的url还是图片本身发生了歧义，在一番讨论之后，得出的结果是，我们需要通过url将图片下载到我们本地，然后调用我们自己的文件微服务中上传功能保存起来。</p><p>​    跨服务之间调用，我们采用的是Feign组件，原生的Feign组件并不支持文件上传，但是如果添加了Feign-Form模块，那么就能上传文件，下面我通过一篇文章来讲述如何通过Feign上传文件，代码已经上传github地址。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>个人博客首发： <a href="https://Shiyajian.github.io">https://Shiyajian.github.io</a></p><p>github项目地址：<a href="https://github.com/Shiyajian/examples" target="_blank" rel="noopener">https://github.com/Shiyajian/examples</a> ，请找spring-cloud/chapter1</p><p>本博客所有文章除特别声明外，均采用 <a href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank" rel="noopener">BY-NC-SA</a> 许可协议。转载请注明出处！</p><h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><ul><li>IDE ：IntelliJ IDEA</li><li>JDK :  jdk 8</li><li>构建工具：Gradle 4.10.2</li><li>Spring Cloud 版本：Finchley.SR2 （截止2018-11-25最新的GA版本，基于boot 2.0.6）</li><li>Spring Boot 版本：2.0.6.RELEASE （截止2018-11-25最新为2.1.0.RELEASE）</li></ul><p>此处采用Gradle而没有使用Maven作为依赖构建和管理的工具，主要原因是我们公司目前使用的是Gradle，而且从编译速度，代码可读性和清晰度上都远远优于Maven。</p><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p>​    本项目分为三个角色，分别如下：</p><ul><li>eurka-server ： 注册中心</li><li>provider-server： 服务提供者，此处模拟一个文件服务器，提供文件上传功能</li><li>consumer-server： 服务消费者，此处模拟一个业务服务，需要调用文件上传服务</li></ul><p>大致的依赖图如下：</p><p><img src="https://Shiyajian.github.io/images/chapter1-1.png" alt=""></p><h4 id="配置并运行"><a href="#配置并运行" class="headerlink" title="配置并运行"></a>配置并运行</h4><p>​    我们首先通过运行感受一下通过Feign上传文件的流程，在整个项目可以完整运行后，我们再参考文章和代码一起分析其中设置，并将其应用到自己的应用中</p><ul><li><p>首先clone项目到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/Shiyajian/examples.git</span><br></pre></td></tr></table></figure></li><li><p>安装并配置Gradle</p></li><li>将项目导入到IDEA中</li><li>确认IDEA支持Lombok插件，默认IDEA都支持的，此步骤可忽略</li><li>更改IDEA设置，Project Settings(Mac中为Preferences)-&gt; Compiler  -&gt; Annoatation Processors  -&gt;  [√] Enable annotation processing </li><li>刷新Gradle，下载依赖并编译</li><li>启动注册中心<ul><li>找到 examples/spring-cloud/eureka-server中的EurekaApplication，运行main方法</li><li>打开浏览器，运行：<a href="http://localhost:8761/，能打开证明成功" target="_blank" rel="noopener">http://localhost:8761/，能打开证明成功</a></li></ul></li><li>启动Provider项目<ul><li>找到 examples/spring-cloud/chapter1/provider/provider-service中的ProviderApplication，运行main方法</li><li>刷新注册中心页面，找到服务证明成功</li></ul></li><li>运行Consumer项目中的测试<ul><li>打开examples/spring-cloud/chapter1/consumer/consumer-server/src/test目录</li><li>修改com.shiyajian.examples.consumer.service.impl.ConsumerServiceImplTest类中文件的路径为本机电脑上存在的文件</li><li>运行测试方法</li><li>方法绿灯结束，在控制台能找到输出为成功</li></ul></li></ul><h4 id="Provider-服务配置说明"><a href="#Provider-服务配置说明" class="headerlink" title="Provider 服务配置说明"></a>Provider 服务配置说明</h4><p>Provider服务为上传服务的提供者，这里模拟的是一个文件服务器，通过上面图，我们可以看到项目分为2部分，下面就进行详细解读：</p><ul><li><p>provider-api</p><p>这个项目最终打成一个可以被引用的jar包，consumer-server通过引用这个jar包可以通过注入方式引用其中的方法，provider-server也需要引用这个jar包，然后实现其中的逻辑，供consumer-server远程调用。配置api的方法如下：</p><ul><li><p>添加org.springframework.cloud:spring-cloud-starter-openfeign依赖，只需要这一个依赖就够了，里面保存Fegin-Form等依赖。</p></li><li><p>编写配置类FeignMultipartSupportConfig.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignMultipartSupportConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Encoder <span class="title">multipartFormEncoder</span><span class="params">(ObjectFactory&lt;HttpMessageConverters&gt; messageConverters)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> FeignSpringFormEncoder(<span class="keyword">new</span> SpringEncoder(messageConverters));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写自定义的Encoder，因为这个有个设计得BUG，本身可以解析文件数组，但是代码缺少对应的判断，此处参考文章：<a href="https://blog.csdn.net/tony_lu229/article/details/73823757，代码不贴了，详细见工程" target="_blank" rel="noopener">https://blog.csdn.net/tony_lu229/article/details/73823757，代码不贴了，详细见工程</a></p></li><li><p>定义自己的接口，这里我定义的是ProviderClient，代码简单如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"provider-server"</span>, configuration = FeignMultipartSupportConfig.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProviderClient</span> </span>&#123; </span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"client/upload/&#123;id&#125;"</span>, consumes = MULTIPART_FORM_DATA_VALUE)</span><br><span class="line">    <span class="function">String <span class="title">uploadFile</span><span class="params">(@RequestPart(<span class="string">"file"</span>)</span> MultipartFile file,</span></span><br><span class="line"><span class="function">                      @<span class="title">PathVariable</span><span class="params">(<span class="string">"id"</span>)</span> String id,</span></span><br><span class="line"><span class="function">                      @<span class="title">RequestParam</span><span class="params">(<span class="string">"name"</span>)</span> String name)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"client/uploads"</span>, consumes = MULTIPART_FORM_DATA_VALUE)</span><br><span class="line">    <span class="function">List&lt;ProviderResponse&gt; <span class="title">uploadFiles</span><span class="params">(@RequestPart(<span class="string">"files"</span>)</span> MultipartFile[] files, @<span class="title">RequestParam</span><span class="params">(<span class="string">"author"</span>)</span> String author)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个接口定义时候需要有以下注意的几点：</p><ul><li>@FeignClient中的value，对应的是服务实现类在eureka中注册的名字，也就是spring.application.name的值</li><li>configuration必须配置，就是咱们上面添加的两个类，用来编解码使用</li><li>方法可以使用类似Controller中的一些注解，比如方法上可以加@RequestMapping，@PostMapping等，类上面不可以加，我试的时候，在class上加了@RequestMapping之后报错，项目启动时候显示Url报错，其实，也完全不需要加</li><li>接受文件的时候，必须是@RequestPart注解，我曾经看有文章说，@RequestPart和@RequestParam通用，但是我自己测试并不是这样</li><li>consumes对应请求的contentType，必须为：multipart/form-data，此处使用了静态导包。</li><li>在传统Controller中，我本身会经常简写@RequestParam，忽略他的value字段。但是Feign接口中不行，如果这些注解没有括号中的value那么就会报错</li><li>不支持@RequestBody注解</li></ul></li><li><p>provider-server</p><p>这个项目是最后实际提供服务的项目，所以必须实现provider-api接口中的方法，并且注册到eureka服务中。</p><ul><li><p>添加对feign的依赖，添加api项目的依赖，其他依赖略</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">compile</span> <span class="keyword">project</span>(<span class="string">":provider-api"</span>)</span><br><span class="line"><span class="string">"org.springframework.cloud:spring-cloud-starter-feign:$feignVersion"</span></span><br></pre></td></tr></table></figure></li><li><p>实现provider-api中ProviderClient接口，生成实现类，并编写业务代码，需要注意两点</p><ul><li>因为父级已经在方法上增加了@PostMapping，此处可以省略</li><li>如果是通过IDEA快生成的实现类，那么参数前面的@RequestPart、@RequestParam的注解需要加上，不然报错</li></ul></li></ul></li><li><p>consumer-server</p><p>这个项目是消费对方提供服务的项目，需要做的也比较简单。</p><ul><li><p>添加provider-api的项目依赖，正式环境下，两个项目可能是不同组开发的，所以需要引入jar包，而不是直接编译此工程，这里仅做展示使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compile project(&quot;:provider-api&quot;)</span><br></pre></td></tr></table></figure></li><li><p>在启动类上增加注解，扫描添加Feign功能对应的包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringCloudApplication</span></span><br><span class="line"><span class="comment">// 这个注解非常重要，不然引用不到client中的方法</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span>(<span class="string">"com.shiyajian.examples.provider"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ConsumerApplication.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在需要的地方通过@Autowird方式注入，然后就可以进行调用了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">ProviderClient providerClient;</span><br><span class="line">……</span><br><span class="line">providerClient.dosomething();</span><br><span class="line">……</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​    整个通过Feign-Form上传文件的案例就写完了，第一次写博客，写的不好还望见谅，如果文章解释的不够清楚，可以参考我的项目中的代码，代码上可能会更清晰点，代码我已经测试通过的，可以放心使用。文章中如果有写错误的地方还望各位指正，当然，如果有什么好的建议也可以给我评论和留言，如果你还其他关于java方面的教程和示例代码你也可以告诉我，我如果不忙的时候，我就会写出来。</p><h4 id="意外"><a href="#意外" class="headerlink" title="意外"></a>意外</h4><p>​    在发文章之前又做了一次测试，这次测试没有通过，通过调查发现，Eureka中项目的注册地址变成了：MacBook-Pro.local:provider-server:8100，然后调用时候就发生url错误，请求fe80:0:0:0:***:8100这个地址，等重新联网之后再次启动，注册地址就变成 192.168.1.101这种地址。</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>​    QQ群：757696438是我的个人好友群，目前也就30来个人，主要就是吹牛侃大山，顺便学习技术共同进步。欢迎各种浪的飞起、闷骚到爆的同志来玩，但是不欢迎装逼的。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-Cloud下使用Feign-Form实现微服务之间的文件上传&quot;&gt;&lt;a href=&quot;#Spring-Cloud下使用Feign-Form实现微服务之间的文件上传&quot; class=&quot;headerlink&quot; title=&quot;Spring Cloud下使用Fei
      
    
    </summary>
    
      <category term="spring cloud" scheme="http://shiyajian.github.io/categories/spring-cloud/"/>
    
    
      <category term="spring cloud" scheme="http://shiyajian.github.io/tags/spring-cloud/"/>
    
      <category term="feign" scheme="http://shiyajian.github.io/tags/feign/"/>
    
  </entry>
  
</feed>
